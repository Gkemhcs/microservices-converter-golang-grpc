// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.12.4
// source: image-to-pdf.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConvertImageToPdfRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageChunk    []byte                 `protobuf:"bytes,1,opt,name=image_chunk,json=imageChunk,proto3" json:"image_chunk,omitempty"`
	EndOfImage    bool                   `protobuf:"varint,2,opt,name=end_of_image,json=endOfImage,proto3" json:"end_of_image,omitempty"` // Indicates the end of an image
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertImageToPdfRequest) Reset() {
	*x = ConvertImageToPdfRequest{}
	mi := &file_image_to_pdf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertImageToPdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertImageToPdfRequest) ProtoMessage() {}

func (x *ConvertImageToPdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_image_to_pdf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertImageToPdfRequest.ProtoReflect.Descriptor instead.
func (*ConvertImageToPdfRequest) Descriptor() ([]byte, []int) {
	return file_image_to_pdf_proto_rawDescGZIP(), []int{0}
}

func (x *ConvertImageToPdfRequest) GetImageChunk() []byte {
	if x != nil {
		return x.ImageChunk
	}
	return nil
}

func (x *ConvertImageToPdfRequest) GetEndOfImage() bool {
	if x != nil {
		return x.EndOfImage
	}
	return false
}

type ConvertImageToPdfResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PdfPath       string                 `protobuf:"bytes,1,opt,name=pdf_path,json=pdfPath,proto3" json:"pdf_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertImageToPdfResponse) Reset() {
	*x = ConvertImageToPdfResponse{}
	mi := &file_image_to_pdf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertImageToPdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertImageToPdfResponse) ProtoMessage() {}

func (x *ConvertImageToPdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_image_to_pdf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertImageToPdfResponse.ProtoReflect.Descriptor instead.
func (*ConvertImageToPdfResponse) Descriptor() ([]byte, []int) {
	return file_image_to_pdf_proto_rawDescGZIP(), []int{1}
}

func (x *ConvertImageToPdfResponse) GetPdfPath() string {
	if x != nil {
		return x.PdfPath
	}
	return ""
}

var File_image_to_pdf_proto protoreflect.FileDescriptor

var file_image_to_pdf_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x70, 0x64, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x64, 0x66, 0x22, 0x5d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x64, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x36, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x64, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x64, 0x66, 0x50, 0x61, 0x74, 0x68, 0x32, 0x7a, 0x0a, 0x1a, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x64, 0x66, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x64,
	0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x50, 0x64, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x64, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_image_to_pdf_proto_rawDescOnce sync.Once
	file_image_to_pdf_proto_rawDescData = file_image_to_pdf_proto_rawDesc
)

func file_image_to_pdf_proto_rawDescGZIP() []byte {
	file_image_to_pdf_proto_rawDescOnce.Do(func() {
		file_image_to_pdf_proto_rawDescData = protoimpl.X.CompressGZIP(file_image_to_pdf_proto_rawDescData)
	})
	return file_image_to_pdf_proto_rawDescData
}

var file_image_to_pdf_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_image_to_pdf_proto_goTypes = []any{
	(*ConvertImageToPdfRequest)(nil),  // 0: image_to_pdf.ConvertImageToPdfRequest
	(*ConvertImageToPdfResponse)(nil), // 1: image_to_pdf.ConvertImageToPdfResponse
}
var file_image_to_pdf_proto_depIdxs = []int32{
	0, // 0: image_to_pdf.ImageToPdfConverterService.Convert:input_type -> image_to_pdf.ConvertImageToPdfRequest
	1, // 1: image_to_pdf.ImageToPdfConverterService.Convert:output_type -> image_to_pdf.ConvertImageToPdfResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_image_to_pdf_proto_init() }
func file_image_to_pdf_proto_init() {
	if File_image_to_pdf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_image_to_pdf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_image_to_pdf_proto_goTypes,
		DependencyIndexes: file_image_to_pdf_proto_depIdxs,
		MessageInfos:      file_image_to_pdf_proto_msgTypes,
	}.Build()
	File_image_to_pdf_proto = out.File
	file_image_to_pdf_proto_rawDesc = nil
	file_image_to_pdf_proto_goTypes = nil
	file_image_to_pdf_proto_depIdxs = nil
}
