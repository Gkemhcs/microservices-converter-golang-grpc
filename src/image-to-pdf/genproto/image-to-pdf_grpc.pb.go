// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: image-to-pdf.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageToPdfConverterService_Convert_FullMethodName = "/image_to_pdf.ImageToPdfConverterService/Convert"
)

// ImageToPdfConverterServiceClient is the client API for ImageToPdfConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageToPdfConverterServiceClient interface {
	Convert(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConvertImageToPdfRequest, ConvertImageToPdfResponse], error)
}

type imageToPdfConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageToPdfConverterServiceClient(cc grpc.ClientConnInterface) ImageToPdfConverterServiceClient {
	return &imageToPdfConverterServiceClient{cc}
}

func (c *imageToPdfConverterServiceClient) Convert(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ConvertImageToPdfRequest, ConvertImageToPdfResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageToPdfConverterService_ServiceDesc.Streams[0], ImageToPdfConverterService_Convert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConvertImageToPdfRequest, ConvertImageToPdfResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageToPdfConverterService_ConvertClient = grpc.ClientStreamingClient[ConvertImageToPdfRequest, ConvertImageToPdfResponse]

// ImageToPdfConverterServiceServer is the server API for ImageToPdfConverterService service.
// All implementations must embed UnimplementedImageToPdfConverterServiceServer
// for forward compatibility.
type ImageToPdfConverterServiceServer interface {
	Convert(grpc.ClientStreamingServer[ConvertImageToPdfRequest, ConvertImageToPdfResponse]) error
	mustEmbedUnimplementedImageToPdfConverterServiceServer()
}

// UnimplementedImageToPdfConverterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageToPdfConverterServiceServer struct{}

func (UnimplementedImageToPdfConverterServiceServer) Convert(grpc.ClientStreamingServer[ConvertImageToPdfRequest, ConvertImageToPdfResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedImageToPdfConverterServiceServer) mustEmbedUnimplementedImageToPdfConverterServiceServer() {
}
func (UnimplementedImageToPdfConverterServiceServer) testEmbeddedByValue() {}

// UnsafeImageToPdfConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageToPdfConverterServiceServer will
// result in compilation errors.
type UnsafeImageToPdfConverterServiceServer interface {
	mustEmbedUnimplementedImageToPdfConverterServiceServer()
}

func RegisterImageToPdfConverterServiceServer(s grpc.ServiceRegistrar, srv ImageToPdfConverterServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageToPdfConverterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageToPdfConverterService_ServiceDesc, srv)
}

func _ImageToPdfConverterService_Convert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageToPdfConverterServiceServer).Convert(&grpc.GenericServerStream[ConvertImageToPdfRequest, ConvertImageToPdfResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageToPdfConverterService_ConvertServer = grpc.ClientStreamingServer[ConvertImageToPdfRequest, ConvertImageToPdfResponse]

// ImageToPdfConverterService_ServiceDesc is the grpc.ServiceDesc for ImageToPdfConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageToPdfConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_to_pdf.ImageToPdfConverterService",
	HandlerType: (*ImageToPdfConverterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Convert",
			Handler:       _ImageToPdfConverterService_Convert_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "image-to-pdf.proto",
}
